rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Quản lý người dùng
    match /users/{userId} {
      // Người dùng chỉ được đọc profile của chính mình
      allow read: if request.auth != null && request.auth.uid == userId;
      // Admin được đọc tất cả profile
      allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      // Người dùng tạo profile của chính họ
      allow create: if request.auth != null && request.auth.uid == userId;
      // Người dùng cập nhật profile của chính họ, không được đổi role
      allow update: if request.auth != null && request.auth.uid == userId && request.resource.data.role == resource.data.role;
      // Admin được cập nhật bất kỳ profile nào, kể cả đổi role
      allow update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Quản lý môn học (courses)
    match /courses/{courseId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Quản lý bài thi (parts)
    match /parts/{partId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Quản lý môn học phụ (subjects) - nếu có
    match /subjects/{subjectId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Quản lý bài test (tests) - nếu có
    match /tests/{testId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Ngân hàng câu hỏi (questions) - nếu có
    match /questions/{questionId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Quản lý kết quả thi (exam_results)
    match /exam_results/{resultId} {
      // Người dùng chỉ được đọc kết quả của chính họ (so sánh theo email hoặc uid, tùy backend lưu userName là gì)
      allow read: if request.auth != null && (
        resource.data.userName == request.auth.token.email || resource.data.userName == request.auth.uid
      );
      // Admin được đọc tất cả
      allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      // Người dùng được ghi kết quả của chính họ
      allow create: if request.auth != null && (
        request.resource.data.userName == request.auth.token.email || request.resource.data.userName == request.auth.uid
      );
      // Không cho phép update, delete từ phía client (chỉ backend thao tác nếu cần)
    }

    // Quản lý tin nhắn (messages) - BỔ SUNG MỚI
    match /messages/{messageId} {
      // Người dùng chỉ được đọc tin nhắn của mình (gửi hoặc nhận)
      allow read: if request.auth != null && (
        resource.data.senderId == request.auth.uid || 
        resource.data.receiverId == request.auth.uid ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
      // Người dùng chỉ được tạo tin nhắn với senderId là chính mình
      allow create: if request.auth != null && request.resource.data.senderId == request.auth.uid;
      // Người dùng chỉ được cập nhật tin nhắn của mình (đánh dấu đã đọc)
      allow update: if request.auth != null && (
        resource.data.senderId == request.auth.uid ||
        resource.data.receiverId == request.auth.uid ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
      // Chỉ admin được xóa tin nhắn
      allow delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Quản lý cuộc trò chuyện (conversations) - BỔ SUNG MỚI
    match /conversations/{conversationId} {
      // Người dùng chỉ được đọc conversation mà họ tham gia
      allow read: if request.auth != null && (
        request.auth.uid in resource.data.participants ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
      // Người dùng chỉ được tạo/cập nhật conversation mà họ tham gia
      allow create, update: if request.auth != null && (
        request.auth.uid in request.resource.data.participants ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
      // Chỉ admin được xóa conversation
      allow delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Mapping user với conversations - BỔ SUNG MỚI
    match /user-conversations/{userId} {
      // Người dùng chỉ được truy cập conversations của chính mình
      allow read, write: if request.auth != null && (
        request.auth.uid == userId ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
    }

    // Quản lý thông báo (notifications) - BỔ SUNG MỚI
    match /notifications/{notificationId} {
      // Người dùng chỉ được đọc thông báo của chính mình
      allow read, write: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
    }

    // Quy tắc mặc định: từ chối tất cả truy cập không được định nghĩa rõ ràng
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 